{"mappings":"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","sources":["src/game.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport { stickmanUrl, trackFloorUrl, brainUrl } from './mesh/models.js';\n\nclass Character {\n  constructor() {\n    this.keysAllowed = {};\n\n    this.element = new THREE.Group();\n    this.mixer = null;\n    this.character = null;\n    this.characterURL = stickmanUrl;\n    this.isRunning = false;\n    this.runAction = null;\n    this.moveLeftDirection = false;\n    this.moveRightDirection = false;\n\n    // Привязываем обработчики событий к экземпляру класса\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n\n  loadCharacter() {\n    return new Promise((resolve, reject) => {\n      const loader = new GLTFLoader();\n      loader.load(\n        this.characterURL,\n        gltf => {\n          this.character = gltf.scene;\n          this.mixer = new THREE.AnimationMixer(this.character);\n          if (\n            this.character.animations &&\n            this.character.animations.length > 0\n          ) {\n            this.playAnimation(this.character.animations, 'Run');\n            this.runAction = this.mixer.clipAction(\n              this.character.animations[4]\n            ); \n          }\n          resolve();\n        },\n        undefined,\n        reject\n      );\n    });\n  }\n\n  playAnimation(animations, name) {\n    if (animations && animations.length > 0) {\n      const clip = THREE.AnimationClip.findByName(animations, name);\n      if (clip) {\n        const action = this.mixer.clipAction(clip);\n        action.play();\n      }\n    }\n  }\n\n  update() {\n    if (this.mixer) {\n      this.mixer.update(0.01);\n    }\n\n    if (this.isRunning) {\n      this.moveForward();\n    }\n\n    if (this.moveLeftDirection) {\n      this.moveLeft();\n    }\n\n    if (this.moveRightDirection) {\n      this.moveRight();\n    }\n  }\n\n  onUpKeyPressed() {\n    this.isRunning = true;\n    if (this.runAction) {\n      this.mixer.stopAllAction();\n      this.runAction.reset();\n      this.runAction.play();\n    }\n  }\n\n  onLeftKeyPressed() {\n    this.moveLeftDirection = true;\n    this.moveRightDirection = false;\n  }\n\n  onRightKeyPressed() {\n    this.moveLeftDirection = false;\n    this.moveRightDirection = true;\n  }\n\n  moveForward() {\n    this.element.position.z -= 3;\n    this.onUpKeyPressed();\n  }\n\n  moveLeft() {\n    if (this.element.position.x > -3) {\n      this.element.position.x -= 1;\n    }\n  }\n\n  moveRight() {\n    if (this.element.position.x < 3) {\n      this.element.position.x += 1;\n    }\n  }\n\n  onUnpause() {}\n\n  onPause() {}\n\n  handleKeyDown(e) {\n    if (!this.gameOver) {\n      const key = e.keyCode;\n      if (this.keysAllowed[key] === false) return;\n      this.keysAllowed[key] = false;\n      if (this.paused && !this.collisionsDetected() && key > 18) {\n        this.paused = false;\n        this.character.onUnpause();\n        document.getElementById('variable-content').style.visibility = 'hidden';\n        document.getElementById('controls').style.display = 'none';\n      } else {\n        if (key === 80) {\n          this.paused = true;\n          this.onPause();\n          document.getElementById('variable-content').style.visibility =\n            'visible';\n          document.getElementById('variable-content').innerHTML =\n            'Game is paused. Press any key to resume.';\n        }\n        if (key === 38 && !this.paused) {\n          this.onUpKeyPressed();\n          console.log('Up key pressed');\n        }\n        if (key === 37 && !this.paused) {\n          this.moveLeftDirection = true;\n          this.moveRightDirection = false;\n          console.log('Left key pressed');\n        }\n        if (key === 39 && !this.paused) {\n          this.moveLeftDirection = false;\n          this.moveRightDirection = true;\n          console.log('Right key pressed');\n        }\n      }\n    }\n  }\n\n  handleKeyUp(e) {\n    const key = e.keyCode;\n    if (key === 37 && !this.paused) {\n      this.moveLeftDirection = false;\n      this.moveRightDirection = false;\n      console.log('Left key released');\n    }\n    if (key === 39 && !this.paused) {\n      this.moveRightDirection = false;\n      this.moveLeftDirection = false;\n      console.log('Right key released');\n    }\n    this.keysAllowed[key] = true;\n  }\n}\n\nclass World {\n  constructor() {\n    this.element = document.getElementById('world');\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      60,\n      this.element.clientWidth / this.element.clientHeight,\n      1,\n      120000\n    );\n    this.renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n    });\n    this.light = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);\n    this.trackFloor = null;\n    this.brain = null;\n    this.paused = true;\n    this.keysAllowed = {};\n    this.gameOver = false;\n    this.score = 0;\n    this.difficulty = 0;\n    this.fogDistance = 40000;\n    this.character = null;\n    this.mixer = null;\n\n    this.init();\n  }\n\n  async init() {\n    this.renderer.setSize(this.element.clientWidth, this.element.clientHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.element.appendChild(this.renderer.domElement);\n    this.scene.fog = new THREE.Fog(0xbadbe4, 1, this.fogDistance);\n    this.scene.background = new THREE.Color(0xa0a0a0);\n    this.camera.position.set(0, 1500, -2000);\n    this.camera.lookAt(new THREE.Vector3(0, 600, -5000));\n\n    window.addEventListener(\n      'resize',\n      this.handleWindowResize.bind(this),\n      false\n    );\n\n    this.scene.add(this.light);\n\n    this.character = new Character();\n    await this.character.loadCharacter(); // Дождитесь загрузки модели и анимаций\n    if (\n      this.character.character.animations &&\n      this.character.character.animations.length > 0\n    ) {\n      this.character.playAnimation(this.character.character.animations, 'Run'); // Воспроизведите анимацию бега\n      this.character.runAction = this.character.mixer.clipAction(\n        this.character.character.animations[4]\n      ); // Установите анимацию бега для runAction\n    }\n    this.character.character.scale.set(100, 100, 100);\n    this.scene.add(this.character.element);\n\n    this.trackFloor = await this.createModel(trackFloorUrl);\n    this.trackFloor.position.set(0, 0, 0);\n    this.scene.add(this.trackFloor);\n\n    this.brain = await this.createModel(brainUrl);\n    this.brain.position.set(0, 0, 0);\n    this.scene.add(this.brain);\n\n    this.keysAllowed = {};\n\n    this.score = 0;\n    this.difficulty = 0;\n    document.getElementById('score').innerHTML = this.score;\n\n    this.initEventListeners();\n\n    this.loop();\n  }\n\n  loop() {\n    if (!this.paused) {\n      if (this.trackFloor.position.z % 3000 === 0) {\n        this.difficulty += 1;\n        const levelLength = 30;\n        if (this.difficulty % levelLength === 0) {\n          const level = this.difficulty / levelLength;\n          switch (level) {\n            case 1:\n              break;\n            // Добавьте дополнительные варианты для других уровней\n          }\n        }\n        this.createRowOfModels(-120000);\n        this.scene.fog.far = this.fogDistance;\n      }\n\n      this.updateModelPositions();\n      this.character.update();\n\n      if (this.collisionsDetected()) {\n        this.gameOver = true;\n        this.paused = true;\n        document.addEventListener('keydown', e => {\n          if (e.keyCode === 40) document.location.reload(true);\n        });\n        const variableContent = document.getElementById('variable-content');\n        variableContent.style.visibility = 'visible';\n        variableContent.innerHTML =\n          'Game over! Press the down arrow to try again.';\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    requestAnimationFrame(this.loop.bind(this));\n  }\n\n  handleWindowResize() {\n    this.camera.aspect = this.element.clientWidth / this.element.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.element.clientWidth, this.element.clientHeight);\n  }\n\n  async createModel(url) {\n    const loader = new GLTFLoader();\n    return new Promise((resolve, reject) => {\n      loader.load(\n        url,\n        gltf => {\n          const model = gltf.scene;\n          this.scene.add(model);\n          resolve(model);\n        },\n        undefined,\n        reject\n      );\n    });\n  }\n\n  createRowOfModels(z) {\n    let pos = -1800;\n    while (pos < 1800) {\n      this.createModel(brainUrl).then(model => {\n        model.position.set(pos, 10, z);\n        this.scene.add(model);\n      });\n      pos += Math.random() * 800 + 800;\n    }\n  }\n\n  updateModelPositions() {\n    this.scene.traverse(object => {\n      if (\n        object instanceof THREE.Mesh &&\n        object !== this.trackFloor &&\n        object !== this.brain &&\n        object !== this.character.element\n      ) {\n        object.position.z += 100;\n      }\n    });\n  }\n\n  collisionsDetected() {\n    if (!this.character || !this.character.element) {\n      return false;\n    }\n\n    const charPos = this.character.element.position.clone();\n    const charBox = new THREE.Box3().setFromObject(this.character.element);\n\n    let collisionDetected = false;\n\n    this.scene.traverse(object => {\n      if (\n        object instanceof THREE.Mesh &&\n        object !== this.character.element &&\n        object !== this.trackFloor &&\n        object !== this.brain\n      ) {\n        const objPos = object.position.clone();\n        const objBox = new THREE.Box3().setFromObject(object);\n        if (charBox.intersectsBox(objBox)) {\n          collisionDetected = true;\n          return;\n        }\n      }\n    });\n\n    return collisionDetected;\n  }\n\n  initEventListeners() {\n    document.addEventListener('keydown', this.character.handleKeyDown);\n    document.addEventListener('keyup', this.character.handleKeyUp);\n    window.addEventListener('focus', this.handleFocus);\n  }\n\n  handleFocus = e => {\n    this.keysAllowed = {};\n  };\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const world = new World();\n});\n"],"names":["$eq1Fs","parcelRequire","$91c667a13b4c74a9$var$Character","constructor","this","keysAllowed","element","Group","mixer","character","characterURL","$l5XAj","stickmanUrl","isRunning","runAction","moveLeftDirection","moveRightDirection","handleKeyDown","bind","handleKeyUp","loadCharacter","Promise","resolve","reject","$kXZ5p","GLTFLoader","load","gltf","scene","AnimationMixer","animations","length","playAnimation","clipAction","undefined","name","clip","AnimationClip","findByName","play","update","moveForward","moveLeft","moveRight","onUpKeyPressed","stopAllAction","reset","onLeftKeyPressed","onRightKeyPressed","position","z","x","onUnpause","onPause","e","gameOver","key","keyCode","paused","collisionsDetected","document","getElementById","style","visibility","display","innerHTML","console","log","$91c667a13b4c74a9$var$World","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","alpha","antialias","light","HemisphereLight","trackFloor","brain","score","difficulty","fogDistance","init","async","setSize","shadowMap","enabled","appendChild","domElement","fog","Fog","background","Color","set","lookAt","Vector3","window","addEventListener","handleWindowResize","add","scale","createModel","trackFloorUrl","brainUrl","initEventListeners","loop","levelLength","createRowOfModels","far","updateModelPositions","location","reload","variableContent","render","requestAnimationFrame","aspect","updateProjectionMatrix","url","loader","model","pos","then","Math","random","traverse","object","Mesh","clone","charBox","Box3","setFromObject","collisionDetected","objBox","intersectsBox","handleFocus"],"version":3,"file":"index.f50b2148.js.map"}