{"mappings":"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","sources":["src/game.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport { stickmanUrl, trackFloorUrl, brainUrl } from './mesh/models.js';\n\nclass Character {\n  constructor() {\n    this.keysAllowed = {};\n\n    this.element = new THREE.Group();\n    this.mixer = null;\n    this.character = null;\n    this.characterURL = stickmanUrl;\n    this.isRunning = false;\n    this.runAction = null;\n    this.moveLeftDirection = false;\n    this.moveRightDirection = false;\n\n    // Привязываем обработчики событий к экземпляру класса\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n\n  loadCharacter() {\n    return new Promise((resolve, reject) => {\n      const loader = new GLTFLoader();\n      loader.load(\n        this.characterURL,\n        gltf => {\n          this.character = gltf.scene;\n          this.mixer = new THREE.AnimationMixer(this.character);\n          if (\n            this.character.animations &&\n            this.character.animations.length > 0\n          ) {\n            this.playAnimation(this.character.animations, 'Run');\n            this.runAction = this.mixer.clipAction(\n              this.character.animations[4]\n            );\n          }\n          resolve();\n        },\n        undefined,\n        reject\n      );\n    });\n  }\n\n  playAnimation(animations, name) {\n    if (animations && animations.length > 0) {\n      const clip = THREE.AnimationClip.findByName(animations, name);\n      if (clip) {\n        const action = this.mixer.clipAction(clip);\n        action.play();\n      }\n    }\n  }\n\n  update() {\n    if (this.mixer) {\n      this.mixer.update(0.01);\n    }\n\n    if (this.isRunning) {\n      this.moveForward();\n    }\n\n    if (this.moveLeftDirection) {\n      this.moveLeft();\n    }\n\n    if (this.moveRightDirection) {\n      this.moveRight();\n    }\n  }\n\n  onKeyPressed(direction) {\n    console.log(`${direction} key pressed handler called`);\n    if (direction === 'up') {\n      this.isRunning = true;\n      if (this.mixer && this.character.animations[4]) {\n        this.mixer.stopAllAction();\n        this.runAction = this.mixer.clipAction(this.character.animations[4]);\n        this.runAction.play();\n      }\n    } else if (direction === 'left') {\n      this.moveLeftDirection = true;\n      this.moveRightDirection = false;\n    } else if (direction === 'right') {\n      this.moveLeftDirection = false;\n      this.moveRightDirection = true;\n    }\n  }\n\n  moveForward() {\n    this.element.position.z -= 3;\n    this.onUpKeyPressed();\n  }\n\n  moveLeft() {\n    // if (this.element.position.x > -3) {\n    console.log('Move left called');\n    this.element.position.x -= 1;\n    // }\n  }\n\n  moveRight() {\n    // if (this.element.position.x < 3) {\n    console.log('Move right called');\n    this.element.position.x += 1;\n    // }\n  }\n\n  handleKeyDown(e) {\n    const key = e.keyCode;\n    if (!this.gameOver && this.keysAllowed[key] !== false) {\n      this.keysAllowed[key] = false;\n      if (!this.paused) {\n        if (key === 38) {\n          this.onKeyPressed('up');\n          console.log('Up key pressed');\n        } else if (key === 37) {\n          this.onKeyPressed('left');\n          console.log('Position X after move left: ', this.element.position.x);\n          console.log('Left key pressed');\n        } else if (key === 39) {\n          this.onKeyPressed('right');\n          console.log('Position X after move right: ', this.element.position.x);\n          console.log('Right key pressed');\n        }\n      }\n    }\n  }\n\n  handleKeyUp(e) {\n    const key = e.keyCode;\n    if (key === 37) {\n      // если отпущена клавиша влево\n      this.moveLeftDirection = false;\n      console.log('Left key released');\n    }\n    if (key === 39) {\n      // если отпущена клавиша вправо\n      this.moveRightDirection = false;\n      console.log('Right key released');\n    }\n    this.keysAllowed[key] = true;\n  }\n}\n\nclass World {\n  constructor() {\n    this.element = document.getElementById('world');\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      60,\n      this.element.clientWidth / this.element.clientHeight,\n      1,\n      120000\n    );\n    this.renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n    });\n    this.light = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);\n    this.trackFloor = null;\n    this.brain = null;\n    this.paused = true;\n    this.keysAllowed = {};\n    this.gameOver = false;\n    this.score = 0;\n    this.difficulty = 0;\n    this.fogDistance = 40000;\n    this.character = null;\n    this.mixer = null;\n\n    this.init();\n  }\n\n  async init() {\n    this.renderer.setSize(this.element.clientWidth, this.element.clientHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.element.appendChild(this.renderer.domElement);\n    this.scene.fog = new THREE.Fog(0xbadbe4, 1, this.fogDistance);\n    this.scene.background = new THREE.Color(0xa0a0a0);\n    this.camera.position.set(0, 1500, -2000);\n    this.camera.lookAt(new THREE.Vector3(0, 600, -5000));\n\n    window.addEventListener(\n      'resize',\n      this.handleWindowResize.bind(this),\n      false\n    );\n\n    this.scene.add(this.light);\n\n    this.character = new Character();\n    await this.character.loadCharacter(); // Дождитесь загрузки модели и анимаций\n    if (\n      this.character.character.animations &&\n      this.character.character.animations.length > 0\n    ) {\n      this.character.playAnimation(this.character.character.animations, 'Run'); // Воспроизведите анимацию бега\n      this.character.runAction = this.character.mixer.clipAction(\n        this.character.character.animations[4]\n      ); // Установите анимацию бега для runAction\n    }\n    this.character.character.scale.set(100, 100, 100);\n    this.scene.add(this.character.element);\n\n    this.trackFloor = await this.createModel(trackFloorUrl);\n    this.trackFloor.position.set(0, 0, 0);\n    this.scene.add(this.trackFloor);\n\n    this.brain = await this.createModel(brainUrl);\n    this.brain.position.set(0, 0, 0);\n    this.scene.add(this.brain);\n\n    this.keysAllowed = {};\n\n    this.score = 0;\n    this.difficulty = 0;\n    document.getElementById('score').innerHTML = this.score;\n\n    this.initEventListeners();\n\n    this.loop();\n  }\n\n  loop() {\n    if (!this.paused) {\n      if (this.trackFloor.position.z % 3000 === 0) {\n        this.difficulty += 1;\n        const levelLength = 30;\n        if (this.difficulty % levelLength === 0) {\n          const level = this.difficulty / levelLength;\n          switch (level) {\n            case 1:\n              break;\n            // Добавьте дополнительные варианты для других уровней\n          }\n        }\n        this.createRowOfModels(-120000);\n        this.scene.fog.far = this.fogDistance;\n      }\n\n      this.updateModelPositions();\n      this.character.update();\n\n      if (this.collisionsDetected()) {\n        this.gameOver = true;\n        this.paused = true;\n        document.addEventListener('keydown', e => {\n          if (e.keyCode === 40) document.location.reload(true);\n        });\n        const variableContent = document.getElementById('variable-content');\n        variableContent.style.visibility = 'visible';\n        variableContent.innerHTML =\n          'Game over! Press the down arrow to try again.';\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    requestAnimationFrame(this.loop.bind(this));\n  }\n\n  handleWindowResize() {\n    this.camera.aspect = this.element.clientWidth / this.element.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.element.clientWidth, this.element.clientHeight);\n  }\n\n  async createModel(url) {\n    const loader = new GLTFLoader();\n    return new Promise((resolve, reject) => {\n      loader.load(\n        url,\n        gltf => {\n          const model = gltf.scene;\n          this.scene.add(model);\n          resolve(model);\n        },\n        undefined,\n        reject\n      );\n    });\n  }\n\n  createRowOfModels(z) {\n    let pos = -1800;\n    while (pos < 1800) {\n      this.createModel(brainUrl).then(model => {\n        model.position.set(pos, 10, z);\n        this.scene.add(model);\n      });\n      pos += Math.random() * 800 + 800;\n    }\n  }\n\n  updateModelPositions() {\n    this.scene.traverse(object => {\n      if (\n        object instanceof THREE.Mesh &&\n        object !== this.trackFloor &&\n        object !== this.brain &&\n        object !== this.character.element\n      ) {\n        object.position.z += 100;\n      }\n    });\n  }\n\n  collisionsDetected() {\n    if (!this.character || !this.character.element) {\n      return false;\n    }\n\n    const charPos = this.character.element.position.clone();\n    const charBox = new THREE.Box3().setFromObject(this.character.element);\n\n    let collisionDetected = false;\n\n    this.scene.traverse(object => {\n      if (\n        object instanceof THREE.Mesh &&\n        object !== this.character.element &&\n        object !== this.trackFloor &&\n        object !== this.brain\n      ) {\n        const objPos = object.position.clone();\n        const objBox = new THREE.Box3().setFromObject(object);\n        if (charBox.intersectsBox(objBox)) {\n          collisionDetected = true;\n          return;\n        }\n      }\n    });\n\n    return collisionDetected;\n  }\n\n  initEventListeners() {\n    document.addEventListener(\n      'keydown',\n      this.character.handleKeyDown.bind(this.character)\n    );\n    document.addEventListener(\n      'keyup',\n      this.character.handleKeyUp.bind(this.character)\n    );\n    window.addEventListener('focus', this.handleFocus);\n  }\n\n  handleFocus = e => {\n    this.keysAllowed = {};\n  };\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const world = new World();\n});\n"],"names":["$bpxeT","parcelRequire","$99d08c4d6b37c7ca$var$Character","Character","this","keysAllowed","element","$6OvZu","Group","mixer","character","characterURL","$fU8Qh","stickmanUrl","isRunning","runAction","moveLeftDirection","moveRightDirection","handleKeyDown","bind","handleKeyUp","key","Promise","resolve","reject","$53OwP","GLTFLoader","load","_this","gltf","_this1","scene","AnimationMixer","animations","length","playAnimation","clipAction","undefined","name","clip","AnimationClip","findByName","play","update","moveForward","moveLeft","moveRight","direction","console","log","concat","stopAllAction","position","z","onUpKeyPressed","x","e","keyCode","gameOver","paused","onKeyPressed","$99d08c4d6b37c7ca$var$World","World","$parcel$interopDefault","$hKHmD","document","getElementById","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","alpha","antialias","light","HemisphereLight","trackFloor","brain","score","difficulty","fogDistance","init","$2TvXO","mark","_callee","setSize","shadowMap","enabled","appendChild","domElement","fog","Fog","background","Color","set","lookAt","Vector3","window","addEventListener","handleWindowResize","add","loadCharacter","scale","createModel","trackFloorUrl","_ctx","sent","brainUrl","innerHTML","initEventListeners","loop","createRowOfModels","far","updateModelPositions","collisionsDetected","location","reload","variableContent","style","visibility","render","requestAnimationFrame","aspect","updateProjectionMatrix","url","loader","model","pos","then","Math","random","traverse","object","Mesh","clone","charBox","Box3","setFromObject","collisionDetected","objBox","intersectsBox","handleFocus"],"version":3,"file":"index.5a0bfd2d.js.map"}