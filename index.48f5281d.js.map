{"mappings":"gfAAAA,EAAA,S,sBAwBcC,KAAKC,E","sources":["src/game.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport {\n  loadModels,\n  updateAnimation,\n  stickmanUrl,\n  trackFloorUrl,\n  brainUrl,\n} from './mesh/models.js';\nvar Colors = {\n  cherry: 0xe35d6a,\n  blue: 0x1560bd,\n  white: 0xd8d0d1,\n  black: 0x000000,\n  brown: 0x59332e,\n  peach: 0xffdab9,\n  yellow: 0xffff00,\n  olive: 0x556b2f,\n  grey: 0x696969,\n  sand: 0xc2b280,\n  brownDark: 0x23190f,\n  green: 0x669900,\n};\n\nvar deg2Rad = Math.PI / 180;\n\n// window.addEventListener('load', function () {\n//   setTimeout(function () {\n//     new World();\n//   }, 0);\n// });\n\n\nfunction World() {\n  var self = this;\n  var element,\n    scene,\n    camera,\n    character,\n    renderer,\n    light,\n    trackFloor,\n    brain,\n    mixer,\n    paused,\n    keysAllowed,\n    score,\n    difficulty,\n    fogDistance,\n    gameOver;\n\n  init();\n\n  function init() {\n    element = document.getElementById('world');\n\n    var variableContent = document.createElement('div');\n    variableContent.className = 'animate-flicker';\n    variableContent.id = 'variable-content';\n    element.appendChild(variableContent);\n\n    \n\n    renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n    });\n    renderer.setSize(element.clientWidth, element.clientHeight);\n    renderer.shadowMap.enabled = true;\n    element.appendChild(renderer.domElement);\n\n    scene = new THREE.Scene();\n    fogDistance = 40000;\n    scene.fog = new THREE.Fog(0xbadbe4, 1, fogDistance);\n\n    camera = new THREE.PerspectiveCamera(\n      60,\n      element.clientWidth / element.clientHeight,\n      1,\n      120000\n    );\n    camera.position.set(0, 1500, -2000);\n    camera.lookAt(new THREE.Vector3(0, 600, -5000));\n    window.camera = camera;\n\n    window.addEventListener('resize', handleWindowResize, false);\n\n    light = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);\n    scene.add(light);\n\n    character = new Character();\n    scene.add(character.element);\n\n   trackFloor = createModel(trackFloorUrl, scene);\n    trackFloor.position.set(0, 0, 0);\n    scene.add(trackFloor);\n\n    brain = createModel(brainUrl);\n    brain.position.set(0, 0, 0);\n    scene.add(brain);\n\n    gameOver = false;\n    paused = true;\n\n    var left = 37;\n    var up = 38;\n    var right = 39;\n    var p = 80;\n\n    keysAllowed = {};\n    document.addEventListener('keydown', function (e) {\n      if (!gameOver) {\n        var key = e.keyCode;\n        if (keysAllowed[key] === false) return;\n        keysAllowed[key] = false;\n        if (paused && !collisionsDetected() && key > 18) {\n          paused = false;\n          character.onUnpause();\n          document.getElementById('variable-content').style.visibility =\n            'hidden';\n          document.getElementById('controls').style.display = 'none';\n        } else {\n          if (key == p) {\n            paused = true;\n            character.onPause();\n            document.getElementById('variable-content').style.visibility =\n              'visible';\n            document.getElementById('variable-content').innerHTML =\n              'Game is paused. Press any key to resume.';\n          }\n          if (key == up && !paused) {\n            character.onUpKeyPressed();\n          }\n          if (key == left && !paused) {\n            character.onLeftKeyPressed();\n            console.log('Left key pressed');\n          }\n          if (key == right && !paused) {\n            character.onRightKeyPressed();\n            console.log('Right key pressed');\n          }\n        }\n      }\n    });\n\n    document.addEventListener('keyup', function (e) {\n      keysAllowed[e.keyCode] = true;\n    });\n\n    document.addEventListener('focus', function (e) {\n      keysAllowed = {};\n    });\n\n    score = 0;\n    difficulty = 0;\n    document.getElementById('score').innerHTML = score;\n\n    loop();\n  }\n\n  function loop() {\n    if (!paused) {\n      if (trackFloor.position.z % 3000 == 0) {\n        difficulty += 1;\n        var levelLength = 30;\n        if (difficulty % levelLength == 0) {\n          var level = difficulty / levelLength;\n          switch (level) {\n            case 1:\n              break;\n            // Add additional cases for different levels\n          }\n        }\n        createRowOfModels(-120000);\n        scene.fog.far = fogDistance;\n      }\n\n      updateModelPositions();\n      character.update();\n\n      if (collisionsDetected()) {\n        gameOver = true;\n        paused = true;\n        document.addEventListener('keydown', function (e) {\n          if (e.keyCode == 40) document.location.reload(true);\n        });\n        var variableContent = document.getElementById('variable-content');\n        variableContent.style.visibility = 'visible';\n        variableContent.innerHTML =\n          'Game over! Press the down arrow to try again.';\n      }\n    }\n\n    renderer.render(scene, camera);\n    requestAnimationFrame(loop);\n  }\n\n  function handleWindowResize() {\n    camera.aspect = element.clientWidth / element.clientHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(element.clientWidth, element.clientHeight);\n  }\n\n  function createRowOfModels(z) {\n    var pos = -1800;\n    while (pos < 1800) {\n      var model = createModel(brainUrl);\n      model.position.set(pos, 10, z);\n      scene.add(model);\n      pos += Math.random() * 800 + 800;\n    }\n  }\n\n  function updateModelPositions() {\n    scene.traverse(function (object) {\n      if (\n        object instanceof THREE.Mesh &&\n        object !== trackFloor &&\n        object !== brain\n      ) {\n        object.position.z += 100;\n      }\n    });\n  }\n\n  function collisionsDetected() {\n    var charPos = character.element.position.clone();\n    var charBox = new THREE.Box3().setFromObject(character.element);\n\n    var collisionDetected = false;\n\n    scene.traverse(function (object) {\n      if (\n        object instanceof THREE.Mesh &&\n        object !== character.element &&\n        object !== trackFloor &&\n        object !== brain\n      ) {\n        var objPos = object.position.clone();\n        var objBox = new THREE.Box3().setFromObject(object);\n        if (charBox.intersectsBox(objBox)) {\n          collisionDetected = true;\n          return;\n        }\n      }\n    });\n\n    return collisionDetected;\n  }\n\nfunction createModel(url) {\n  var loader = new GLTFLoader();\n  var model;\n\n  loader.load(url, function (gltf) {\n    model = gltf.scene;\n    scene.add(model);\n  });\n\n  return model;\n}\n\n\n  function Character() {\n    // Character implementation\n  }\n}\n\n// new World();\n"],"names":["parcelRequire","Math","PI"],"version":3,"file":"index.48f5281d.js.map"}